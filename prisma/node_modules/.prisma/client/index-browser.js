
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.OrganisationScalarFieldEnum = {
  id: 'id',
  password: 'password',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry',
  email: 'email',
  phone: 'phone',
  name: 'name',
  companySize: 'companySize',
  shopName: 'shopName',
  flatNo: 'flatNo',
  street: 'street',
  district: 'district',
  city: 'city',
  state: 'state',
  smsCount: 'smsCount',
  smsCost: 'smsCost',
  country: 'country',
  pincode: 'pincode',
  mobileNumber: 'mobileNumber',
  landlineNumber: 'landlineNumber',
  websiteAddress: 'websiteAddress',
  gstNumber: 'gstNumber',
  subscriptionType: 'subscriptionType',
  endDate: 'endDate',
  whatsappNumber: 'whatsappNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  razorpayAccessToken: 'razorpayAccessToken',
  razorpayRefreshToken: 'razorpayRefreshToken',
  razorpayTokenExpiresAt: 'razorpayTokenExpiresAt',
  razorpayAccountId: 'razorpayAccountId',
  razorpayState: 'razorpayState',
  razorpayStateExpiresAt: 'razorpayStateExpiresAt',
  monthlyUsage: 'monthlyUsage'
};

exports.Prisma.CustomerSubmissionScalarFieldEnum = {
  id: 'id',
  token: 'token',
  organisationId: 'organisationId',
  customerId: 'customerId',
  notes: 'notes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  organisationId: 'organisationId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  SKU: 'SKU',
  netPrice: 'netPrice',
  sellingPrice: 'sellingPrice',
  quantity: 'quantity',
  seller: 'seller',
  organisationId: 'organisationId',
  categoryId: 'categoryId'
};

exports.Prisma.SellerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contact: 'contact',
  type: 'type',
  organisationId: 'organisationId'
};

exports.Prisma.TransactionRecordScalarFieldEnum = {
  id: 'id',
  billNo: 'billNo',
  totalPrice: 'totalPrice',
  paymentMethod: 'paymentMethod',
  amountPaid: 'amountPaid',
  balance: 'balance',
  billingMode: 'billingMode',
  organisationId: 'organisationId',
  date: 'date',
  time: 'time',
  trackingNumber: 'trackingNumber',
  weight: 'weight',
  customerId: 'customerId',
  status: 'status',
  notes: 'notes',
  paymentId: 'paymentId',
  paymentStatus: 'paymentStatus',
  isEdited: 'isEdited'
};

exports.Prisma.TransactionItemScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  productId: 'productId',
  quantity: 'quantity',
  totalPrice: 'totalPrice'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  district: 'district',
  state: 'state',
  pincode: 'pincode',
  email: 'email',
  flatNo: 'flatNo',
  street: 'street',
  organisationId: 'organisationId'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  categoryId: 'categoryId',
  organisationId: 'organisationId',
  quantity: 'quantity'
};

exports.Prisma.SubscriptionDetailsScalarFieldEnum = {
  id: 'id',
  organisationId: 'organisationId',
  date: 'date',
  month: 'month',
  year: 'year',
  smsCount: 'smsCount',
  shopName: 'shopName',
  mobileNumber: 'mobileNumber'
};

exports.Prisma.ShippingMethodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  minAmount: 'minAmount',
  useWeight: 'useWeight',
  ratePerKg: 'ratePerKg',
  fixedRate: 'fixedRate',
  isActive: 'isActive',
  organisationId: 'organisationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionShippingScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  methodName: 'methodName',
  methodType: 'methodType',
  baseRate: 'baseRate',
  weightCharge: 'weightCharge',
  totalWeight: 'totalWeight',
  totalCost: 'totalCost'
};

exports.Prisma.MandateScalarFieldEnum = {
  id: 'id',
  organisationId: 'organisationId',
  merchantTranId: 'merchantTranId',
  bankRRN: 'bankRRN',
  UMN: 'UMN',
  amount: 'amount',
  status: 'status',
  payerVA: 'payerVA',
  payerName: 'payerName',
  payerMobile: 'payerMobile',
  txnInitDate: 'txnInitDate',
  txnCompletionDate: 'txnCompletionDate',
  responseCode: 'responseCode',
  respCodeDescription: 'respCodeDescription'
};

exports.Prisma.ActiveMandateScalarFieldEnum = {
  id: 'id',
  organisationId: 'organisationId',
  UMN: 'UMN',
  mandateSeqNo: 'mandateSeqNo',
  amount: 'amount',
  notificationRetries: 'notificationRetries',
  retryCount: 'retryCount',
  status: 'status',
  payerVA: 'payerVA',
  payerName: 'payerName',
  payerMobile: 'payerMobile',
  notified: 'notified',
  lastAttemptAt: 'lastAttemptAt',
  lastNotificationAttempt: 'lastNotificationAttempt'
};

exports.Prisma.MandateNotificationScalarFieldEnum = {
  id: 'id',
  organisationId: 'organisationId',
  type: 'type',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.OrganisationOrderByRelevanceFieldEnum = {
  password: 'password',
  resetToken: 'resetToken',
  email: 'email',
  phone: 'phone',
  name: 'name',
  companySize: 'companySize',
  shopName: 'shopName',
  flatNo: 'flatNo',
  street: 'street',
  district: 'district',
  city: 'city',
  state: 'state',
  country: 'country',
  pincode: 'pincode',
  mobileNumber: 'mobileNumber',
  landlineNumber: 'landlineNumber',
  websiteAddress: 'websiteAddress',
  gstNumber: 'gstNumber',
  subscriptionType: 'subscriptionType',
  whatsappNumber: 'whatsappNumber',
  razorpayAccessToken: 'razorpayAccessToken',
  razorpayRefreshToken: 'razorpayRefreshToken',
  razorpayAccountId: 'razorpayAccountId',
  razorpayState: 'razorpayState'
};

exports.Prisma.CustomerSubmissionOrderByRelevanceFieldEnum = {
  token: 'token',
  notes: 'notes',
  status: 'status'
};

exports.Prisma.ProductCategoryOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  name: 'name',
  SKU: 'SKU',
  seller: 'seller'
};

exports.Prisma.SellerOrderByRelevanceFieldEnum = {
  name: 'name',
  contact: 'contact',
  type: 'type'
};

exports.Prisma.TransactionRecordOrderByRelevanceFieldEnum = {
  paymentMethod: 'paymentMethod',
  billingMode: 'billingMode',
  trackingNumber: 'trackingNumber',
  status: 'status',
  notes: 'notes',
  paymentId: 'paymentId'
};

exports.Prisma.CustomerOrderByRelevanceFieldEnum = {
  name: 'name',
  phone: 'phone',
  district: 'district',
  state: 'state',
  pincode: 'pincode',
  email: 'email',
  flatNo: 'flatNo',
  street: 'street'
};

exports.Prisma.SubscriptionDetailsOrderByRelevanceFieldEnum = {
  shopName: 'shopName',
  mobileNumber: 'mobileNumber'
};

exports.Prisma.ShippingMethodOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.TransactionShippingOrderByRelevanceFieldEnum = {
  methodName: 'methodName'
};

exports.Prisma.MandateOrderByRelevanceFieldEnum = {
  merchantTranId: 'merchantTranId',
  bankRRN: 'bankRRN',
  UMN: 'UMN',
  status: 'status',
  payerVA: 'payerVA',
  payerName: 'payerName',
  payerMobile: 'payerMobile',
  responseCode: 'responseCode',
  respCodeDescription: 'respCodeDescription'
};

exports.Prisma.ActiveMandateOrderByRelevanceFieldEnum = {
  UMN: 'UMN',
  status: 'status',
  payerVA: 'payerVA',
  payerName: 'payerName',
  payerMobile: 'payerMobile'
};

exports.Prisma.MandateNotificationOrderByRelevanceFieldEnum = {
  type: 'type',
  message: 'message'
};
exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED'
};

exports.ShippingMethodType = exports.$Enums.ShippingMethodType = {
  FREE_SHIPPING: 'FREE_SHIPPING',
  COURIER_PARTNER: 'COURIER_PARTNER'
};

exports.Prisma.ModelName = {
  Organisation: 'Organisation',
  CustomerSubmission: 'CustomerSubmission',
  ProductCategory: 'ProductCategory',
  Product: 'Product',
  Seller: 'Seller',
  TransactionRecord: 'TransactionRecord',
  TransactionItem: 'TransactionItem',
  Customer: 'Customer',
  Inventory: 'Inventory',
  SubscriptionDetails: 'SubscriptionDetails',
  ShippingMethod: 'ShippingMethod',
  TransactionShipping: 'TransactionShipping',
  Mandate: 'Mandate',
  ActiveMandate: 'ActiveMandate',
  MandateNotification: 'MandateNotification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
