generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://admin:Vaseegrah%242024Tech@billz.c3su6oogocya.ap-south-1.rds.amazonaws.com:3306/billz"
}

// url      = "mysql://admin:Vaseegrah%242024Tech@billz.c3su6oogocya.ap-south-1.rds.amazonaws.com:3306/billz"

model Organisation {
  id               Int       @id @default(autoincrement())
  password         String
  resetToken       String?   @map("reset_token")
  resetTokenExpiry DateTime? @map("reset_token_expiry")
  email            String    @unique
  phone            String
  name             String
  companySize      String    @map("company_size")
  shopName         String    @map("shop_name")
  flatNo           String    @map("flatno")
  street           String
  district         String
  city             String?
  state            String
  smsCount         Int       @default(0) @map("sms_count")
  smsCost          Float     @default(0) @map("sms_cost")
  country          String
  pincode          String
  mobileNumber     String    @map("mobile_number")
  landlineNumber   String?   @map("landline_number")
  websiteAddress   String?   @map("website_address")
  gstNumber        String?   @map("gst_number")
  subscriptionType String    @map("subscription_type")
  endDate          DateTime  @map("end_date")
  whatsappNumber   String?   @map("whatsapp_number")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  productCategories ProductCategory[]
  products          Product[]
  sellers           Seller[]
  transactions      TransactionRecord[]
  customers         Customer[]
  inventory         Inventory[]

  @@index([resetToken])
  @@map("organisation")
}

model ProductCategory {
  id             Int          @id @default(autoincrement())
  name           String
  organisationId Int          @map("organisation_id")
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  // Relations
  products  Product[]
  inventory Inventory[]

  @@map("product_categories")
}

model Product {
  id             Int    @id @default(autoincrement())
  name           String
  SKU            String
  netPrice       Float  @map("net_price")
  sellingPrice   Float  @map("selling_price")
  quantity       Int
  seller         String
  organisationId Int    @map("organisation_id")
  categoryId     Int?   @map("category_id")

  // Relations
  organisation     Organisation      @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  category         ProductCategory?  @relation(fields: [categoryId], references: [id])
  inventory        Inventory[]
  transactionItems TransactionItem[]

  @@map("products")
}

model Seller {
  id             Int          @id @default(autoincrement())
  name           String
  contact        String
  type           String
  organisationId Int          @map("organisation_id")
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@map("sellers")
}

model TransactionRecord {
  id             Int      @id @default(autoincrement())
  billNo         Int      @unique @map("bill_no")
  totalPrice     Float    @map("total_price")
  paymentMethod  String   @map("payment_method")
  amountPaid     Float    @default(0) @map("amount_paid")
  balance        Float    @default(0)
  billingMode    String   @map("billing_mode")
  organisationId Int      @map("organisation_id")
  date           DateTime @db.Date
  time           DateTime @db.Time
  trackingNumber String?  @map("tracking_number")
  weight         Float?
  customerId     Int?     @map("customer_id")
  status         String   @default("confirmed")

  // Relations
  organisation Organisation      @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  customer     Customer?         @relation(fields: [customerId], references: [id], onDelete: SetNull)
  items        TransactionItem[]

  @@map("transaction_record")
}

model TransactionItem {
  id            Int   @id @default(autoincrement())
  transactionId Int   @map("transaction_id")
  productId     Int   @map("product_id")
  quantity      Int
  totalPrice    Float @map("total_price")

  // Relations
  transaction TransactionRecord @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product     Product           @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("transaction_items")
}

model Customer {
  id             Int     @id @default(autoincrement())
  name           String
  phone          String
  district       String?
  state          String?
  pincode        String?
  email          String?
  flatNo         String? @map("flat_no")
  street         String?
  organisationId Int     @map("organisation_id")

  // Relations
  organisation Organisation        @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  transactions TransactionRecord[]

  @@map("customers")
}

model Inventory {
  id             Int  @id @default(autoincrement())
  productId      Int  @map("product_id")
  categoryId     Int? @map("category_id")
  organisationId Int  @map("organisation_id")
  quantity       Int

  product      Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  category     ProductCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  organisation Organisation     @relation(fields: [organisationId], references: [id], onDelete: Cascade)

  @@unique([productId, organisationId])
  @@map("inventory")
}

model SubscriptionDetails {
  id             Int      @id @default(autoincrement())
  organisationId Int      @map("organisation_id")
  date           DateTime @db.Date
  month          Int
  year           Int
  smsCount       Int      @map("sms_count")
  shopName       String   @map("shop_name")
  mobileNumber   String   @map("mobile_number")

  @@map("subscription_details")
}
